[{"/Users/ada/projects/get2gether-capstone/src/index.js":"1","/Users/ada/projects/get2gether-capstone/src/components/Home.js":"2","/Users/ada/projects/get2gether-capstone/src/components/Signup.js":"3","/Users/ada/projects/get2gether-capstone/src/App.js":"4","/Users/ada/projects/get2gether-capstone/src/reportWebVitals.js":"5","/Users/ada/projects/get2gether-capstone/src/components/Search.js":"6","/Users/ada/projects/get2gether-capstone/src/contexts/AuthContext.js":"7","/Users/ada/projects/get2gether-capstone/src/firebase.js":"8","/Users/ada/projects/get2gether-capstone/src/components/UserDashboard.js":"9","/Users/ada/projects/get2gether-capstone/src/components/Login.js":"10","/Users/ada/projects/get2gether-capstone/src/components/Contacts.js":"11","/Users/ada/projects/get2gether-capstone/src/components/ForgotPassword.js":"12","/Users/ada/projects/get2gether-capstone/src/components/PrivateRoute.js":"13","/Users/ada/projects/get2gether-capstone/src/components/UpdateAccount.js":"14","/Users/ada/projects/get2gether-capstone/src/components/ProfileForm.js":"15","/Users/ada/projects/get2gether-capstone/src/components/Navigation.js":"16","/Users/ada/projects/get2gether-capstone/src/components/UpdateProfile.js":"17"},{"size":598,"mtime":1612943210496,"results":"18","hashOfConfig":"19"},{"size":227,"mtime":1613116375927,"results":"20","hashOfConfig":"19"},{"size":2432,"mtime":1613113060816,"results":"21","hashOfConfig":"19"},{"size":2158,"mtime":1613120321712,"results":"22","hashOfConfig":"19"},{"size":362,"mtime":1612190544597,"results":"23","hashOfConfig":"19"},{"size":183,"mtime":1612413205649,"results":"24","hashOfConfig":"19"},{"size":1415,"mtime":1612981805731,"results":"25","hashOfConfig":"19"},{"size":619,"mtime":1612983524415,"results":"26","hashOfConfig":"19"},{"size":1454,"mtime":1613116429019,"results":"27","hashOfConfig":"19"},{"size":2189,"mtime":1613116079012,"results":"28","hashOfConfig":"19"},{"size":162,"mtime":1612223714512,"results":"29","hashOfConfig":"19"},{"size":1989,"mtime":1613113164335,"results":"30","hashOfConfig":"19"},{"size":438,"mtime":1613020344338,"results":"31","hashOfConfig":"19"},{"size":2910,"mtime":1613115934897,"results":"32","hashOfConfig":"19"},{"size":5511,"mtime":1613116297054,"results":"33","hashOfConfig":"19"},{"size":1450,"mtime":1613116409013,"results":"34","hashOfConfig":"19"},{"size":5343,"mtime":1613120584544,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1d9tyy3",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},"/Users/ada/projects/get2gether-capstone/src/index.js",[],["76","77"],"/Users/ada/projects/get2gether-capstone/src/components/Home.js",[],"/Users/ada/projects/get2gether-capstone/src/components/Signup.js",[],"/Users/ada/projects/get2gether-capstone/src/App.js",["78"],"/Users/ada/projects/get2gether-capstone/src/reportWebVitals.js",[],["79","80"],"/Users/ada/projects/get2gether-capstone/src/components/Search.js",[],"/Users/ada/projects/get2gether-capstone/src/contexts/AuthContext.js",[],["81","82"],"/Users/ada/projects/get2gether-capstone/src/firebase.js",[],"/Users/ada/projects/get2gether-capstone/src/components/UserDashboard.js",[],"/Users/ada/projects/get2gether-capstone/src/components/Login.js",["83"],"/Users/ada/projects/get2gether-capstone/src/components/Contacts.js",[],"/Users/ada/projects/get2gether-capstone/src/components/ForgotPassword.js",["84"],"/Users/ada/projects/get2gether-capstone/src/components/PrivateRoute.js",[],["85","86"],"/Users/ada/projects/get2gether-capstone/src/components/UpdateAccount.js",[],"/Users/ada/projects/get2gether-capstone/src/components/ProfileForm.js",["87","88"],"import React, { useState } from 'react'\nimport { useAuth } from '../contexts/AuthContext'\nimport axios from 'axios'\nimport { Form, Button, Container, Card, Col} from 'react-bootstrap';\nimport \"bootswatch/dist/united/bootstrap.min.css\"\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\n\nexport default function ProfileForm(baseUrl, setDashboardUser) {\n\n    const { currentUser } = useAuth;\n    const [error, setError] = useState('')\n\n    const [user, setUser] = useState({\n        auth_id: currentUser.uid,\n        full_name: currentUser.displayName,\n        location_info: {\n            country: '',\n            state: '',\n            city: ''\n        }\n        //availability_info: {}, --> time windows where user is available\n        //avatar_url': submitted_data['avatar_url'], # bonus =  choose from available\n    })\n\n    const handleChange = (e) => {\n        const updatedInfo = e.target.name\n        const updatedValue = e.target.updatedValue\n        const newLocation = ['country', 'state', 'city']\n\n        if (newLocation.includes(updatedInfo)) {\n            setUser({\n                ...user,\n                location_info: {\n                    ...user.location_info,\n                    [updatedInfo]: updatedValue,\n                }\n            })\n        } else {\n            setUser({\n                ...user,\n                [updatedInfo]: updatedValue,\n            });\n        }\n\n        const handleCheck = (e) => {\n            setUser({\n                ...user,\n                [e.target.name]: !user[e.target.name]\n            });\n        }\n    }\n\n        //check if all fields are populated\n        const checkPopulatedFields = () => {\n            const fields =\n                Object.values(user)\n                    .filter((element) => {\n                        return typeof (element) !== 'object' && typeof (element) !== 'boolean'\n                    })\n                    .concat(Object.values(user.address))\n            \n            if (fields.every((field) => field)) {\n                return true\n            } else {\n                setError({\n                    variant: 'warning',\n                    message: 'All fields must be populated.'\n                })\n                return false;\n            }\n        }\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (checkPopulatedFields()) {\n            axios.post(baseUrl + '/users', user)\n                .then((response) => {\n                    setDashboardUser(response);\n\n                    setUser({\n                        auth_id :currentUser.uid,\n                        full_name: '',\n                        location_info: {\n                            country: '',\n                            state: '',\n                            city: ''\n                        }\n                        //availability_info: {}, --> time windows where user is available\n                        //avatar_url': '', # bonus =  choose from available\n                    })\n                    setError({ variant: 'success', message: response.data.message })\n                })\n                .catch((error) => {\n                    const message=`There was an error with your request. Could not save user profile ${error.response && error.response.data.message ? error.response.data.message : error.message}.`;\n                    setError({ variant: 'danger', message: message });\n                    console.log(message);\n                })\n        }\n    }\n\n\n\n    return (\n        <Container>\n            <div class=\"jumbotron\">\n                <Card>\n                    <Card.Body>\n                        <Form onSubmit={handleSubmit}>\n                            <h3 className='text-center mb-4'>Profile</h3>\n                            <Form.Row>\n                                <Form.Group as={Col}>\n                                    <Form.Label>Full Name</Form.Label>\n                                    <Form.Control type=\"text\" name='full_name' value={user.full_name} onChange={handleChange} />\n                                </Form.Group>\n\n                            </Form.Row>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridCountry\" >\n                                    <Form.Label>Country</Form.Label>\n                                    <Form.Control name='country' value={user.location_info.country} onChange={handleChange} />\n                                </Form.Group>\n                                <Form.Group as={Col} controlId='formGridState' >\n                                    <Form.Label>State</Form.Label>\n                                    <Form.Control name='state' value={user.location_info.city} onChange={handleChange} />\n                                </Form.Group>\n                            </Form.Row>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridCity\" >\n                                    <Form.Label>City</Form.Label>\n                                    <Form.Control name='city' value={user.location_info.city} onChange={handleChange} />\n                                </Form.Group>\n                            </Form.Row>\n                            <Button variant='primary' type=\"submit\" value=\"submit\">\n                                Submit\n                            </Button>\n                        </Form>\n                    </Card.Body>\n                </Card>\n            </div>\n        </Container>\n    )\n}","/Users/ada/projects/get2gether-capstone/src/components/Navigation.js",[],"/Users/ada/projects/get2gether-capstone/src/components/UpdateProfile.js",["89","90","91"],"import React, { useState, useEffect } from 'react'\nimport { Form, Button, Container, Card, Col } from 'react-bootstrap'\nimport { useAuth } from '../contexts/AuthContext';\nimport { useHistory } from 'react-router-dom'\nimport axios from 'axios'\n\n\n\nexport default function UpdateProfile({baseURL}) {\n    const { currentUser } = useAuth();\n    const [error, setError] = useState('');\n    const [user, setUser] = useState(null);\n    const history = useHistory();\n\n    const loadUserData = () => {\n        currentUser && \n            axios.get(`${baseURL}/users/current/${currentUser.uid}`)\n                .then((response) => {\n                    const apiUser = Object.values(response.data)[0]\n                    if (Object.keys(response.data)[0] !== 'message') {\n                        apiUser.userID = Object.keys(response.data)[0]\n                        setUser(apiUser);\n                    } else {\n                        setError({variant: 'warning', message: apiUser})\n                    }\n                })\n                .catch((error) => {\n                    const message=`There was an error with your request. ${error.response && error.response.data.message ? error.response.data.message : error.message}`;\n                    setError({variant: 'danger', message: message});\n                    console.log(message);\n                })\n    }\n\n    useEffect(() => {\n        loadUserData();\n    }, [])\n\n\n    const handleChange = (e) => {\n        const updatedInfo = e.target.name\n        const updatedValue = e.target.values\n        const newLocation = ['country', 'state', 'city']\n\n        if (newLocation.includes(updatedInfo)) {\n            setUser({\n                ...user,\n                location_info: {\n                    ...user.location_info,\n                    [updatedInfo]: updatedValue,\n                }\n            })\n        } else {\n            setUser({\n                ...user,\n                [updatedInfo]: updatedValue,\n            })\n        }\n    }\n\n\n    //check if all fields are populated\n    const checkPopulatedFields = () => {\n        const fields =\n            Object.values(user)\n                .filter((element) => {\n                    return typeof (element) !== 'object' && typeof (element) !== 'boolean'\n                })\n                .concat(Object.values(user.location_info))\n        \n        if (fields.every((field) => field)) {\n            return true\n        } else {\n            setError({\n                variant: 'warning',\n                message: 'All fields must be populated.'\n            })\n            return false;\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (checkPopulatedFields()) {\n            axios.put(baseURL + '/users/' + user.userID, user)\n                .then((response) => {\n                    setError({variant: 'success', message: response.data.message});\n                    history.push('/');\n                })\n                .catch((error) => {\n                    const message=`There was an error with your request. User profile was not saved. ${error.response && error.response.data.message ? error.response.data.message : error.message}.`;\n                    setError({variant: 'danger', message: message});\n                    console.log(message);\n                })\n        }\n\n    }\n\n    // if (!user) {\n    //     return(\n    //         <div></div>\n    //     )\n    // }\n    return (\n        <Container>\n        {/* <div class=\"jumbotron\"> */}\n            <Card>\n                <Card.Body>\n                    <Form onSubmit={handleSubmit}>\n                        <h3 className='text-center mb-4'>Profile</h3>\n                        <Form.Row>\n                            <Form.Group as={Col}>\n                                <Form.Label>Full Name</Form.Label>\n                                <Form.Control type=\"text\" name='full_name' value={user.full_name} onChange={handleChange} />\n                            </Form.Group>\n\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"formGridCountry\" >\n                                <Form.Label>Country</Form.Label>\n                                <Form.Control name='country' value={user.location_info.country} onChange={handleChange} />\n                            </Form.Group>\n                            <Form.Group as={Col} controlId='formGridState' >\n                                <Form.Label>State</Form.Label>\n                                <Form.Control name='state' value={user.location_info.city} onChange={handleChange} />\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"formGridCity\" >\n                                <Form.Label>City</Form.Label>\n                                <Form.Control name='city' value={user.location_info.city} onChange={handleChange} />\n                            </Form.Group>\n                        </Form.Row>\n                        <Button variant='primary' type=\"submit\" value=\"submit\">\n                            Submit\n                        </Button>\n                    </Form>\n                </Card.Body>\n            </Card>\n        {/* </div> */}\n    </Container>\n\n    )\n\n}",{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":20,"column":8,"nodeType":"98","messageId":"99","endLine":20,"endColumn":12},{"ruleId":"92","replacedBy":"100"},{"ruleId":"94","replacedBy":"101"},{"ruleId":"92","replacedBy":"102"},{"ruleId":"94","replacedBy":"103"},{"ruleId":"96","severity":1,"message":"104","line":2,"column":37,"nodeType":"98","messageId":"99","endLine":2,"endColumn":46},{"ruleId":"96","severity":1,"message":"105","line":14,"column":12,"nodeType":"98","messageId":"99","endLine":14,"endColumn":17},{"ruleId":"92","replacedBy":"106"},{"ruleId":"94","replacedBy":"107"},{"ruleId":"96","severity":1,"message":"105","line":13,"column":12,"nodeType":"98","messageId":"99","endLine":13,"endColumn":17},{"ruleId":"96","severity":1,"message":"108","line":47,"column":15,"nodeType":"98","messageId":"99","endLine":47,"endColumn":26},{"ruleId":"96","severity":1,"message":"105","line":11,"column":12,"nodeType":"98","messageId":"99","endLine":11,"endColumn":17},{"ruleId":"109","severity":1,"message":"110","line":36,"column":8,"nodeType":"111","endLine":36,"endColumn":10,"suggestions":"112"},{"ruleId":"96","severity":1,"message":"108","line":60,"column":11,"nodeType":"98","messageId":"99","endLine":60,"endColumn":22},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-unused-vars","'User' is defined but never used.","Identifier","unusedVar",["113"],["114"],["113"],["114"],"'Container' is defined but never used.","'error' is assigned a value but never used.",["113"],["114"],"'handleCheck' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadUserData'. Either include it or remove the dependency array.","ArrayExpression",["115"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},"Update the dependencies array to be: [loadUserData]",{"range":"118","text":"119"},[1414,1416],"[loadUserData]"]